// Generated by Xata Codegen 0.29.3. Please do not edit.
import { buildClient } from "@xata.io/client";
import type {
  BaseClientOptions,
  SchemaInference,
  XataRecord,
} from "@xata.io/client";

const tables = [
  {
    name: "Users",
    columns: [
      { name: "email", type: "email", unique: true },
      { name: "name", type: "string", notNull: true, defaultValue: "user" },
      { name: "avatar", type: "string" },
      { name: "isGov", type: "bool", notNull: true, defaultValue: "false" },
    ],
    revLinks: [
      { column: "user", table: "Messages" },
      { column: "user", table: "SavedHouses" },
      { column: "user", table: "OAuth" },
      { column: "user", table: "Sessions" },
    ],
  },
  {
    name: "Messages",
    columns: [
      { name: "user", type: "link", link: { table: "Users" } },
      { name: "message", type: "text" },
      { name: "title", type: "string" },
      { name: "status", type: "string", notNull: true, defaultValue: "open" },
      { name: "lon", type: "float", defaultValue: "0" },
      { name: "lat", type: "float", defaultValue: "0" },
      { name: "category", type: "string", defaultValue: "Aucune" },
    ],
  },
  {
    name: "SavedHouses",
    columns: [
      { name: "user", type: "link", link: { table: "Users" } },
      {
        name: "address",
        type: "string",
        notNull: true,
        defaultValue: "Address",
      },
      { name: "lon", type: "float", notNull: true, defaultValue: "0" },
      { name: "lat", type: "float", notNull: true, defaultValue: "0" },
    ],
  },
  {
    name: "OAuth",
    columns: [
      {
        name: "provider",
        type: "string",
        notNull: true,
        defaultValue: "unknown",
      },
      { name: "user", type: "link", link: { table: "Users" } },
      { name: "accountId", type: "string", unique: true },
    ],
  },
  {
    name: "Sessions",
    columns: [
      { name: "user", type: "link", link: { table: "Users" } },
      {
        name: "expiresAt",
        type: "datetime",
        notNull: true,
        defaultValue: "now",
      },
    ],
  },
  {
    name: "MapData",
    columns: [
      { name: "numberOfTrees", type: "int" },
      { name: "numberOfAddresses", type: "int" },
    ],
  },
] as const;

export type SchemaTables = typeof tables;
export type InferredTypes = SchemaInference<SchemaTables>;

export type Users = InferredTypes["Users"];
export type UsersRecord = Users & XataRecord;

export type Messages = InferredTypes["Messages"];
export type MessagesRecord = Messages & XataRecord;

export type SavedHouses = InferredTypes["SavedHouses"];
export type SavedHousesRecord = SavedHouses & XataRecord;

export type OAuth = InferredTypes["OAuth"];
export type OAuthRecord = OAuth & XataRecord;

export type Sessions = InferredTypes["Sessions"];
export type SessionsRecord = Sessions & XataRecord;

export type MapData = InferredTypes["MapData"];
export type MapDataRecord = MapData & XataRecord;

export type DatabaseSchema = {
  Users: UsersRecord;
  Messages: MessagesRecord;
  SavedHouses: SavedHousesRecord;
  OAuth: OAuthRecord;
  Sessions: SessionsRecord;
  MapData: MapDataRecord;
};

const DatabaseClient = buildClient();

const defaultOptions = {
  databaseURL: "https://Wolfgang-p564tb.us-east-1.xata.sh/db/InfoToit",
};

export class XataClient extends DatabaseClient<DatabaseSchema> {
  constructor(options?: BaseClientOptions) {
    super({ ...defaultOptions, ...options }, tables);
  }
}

let instance: XataClient | undefined = undefined;

export const getXataClient = () => {
  if (instance) return instance;

  instance = new XataClient();
  return instance;
};
